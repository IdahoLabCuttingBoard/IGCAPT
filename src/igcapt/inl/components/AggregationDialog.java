/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package igcapt.inl.components;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import org.openstreetmap.gui.jmapviewer.IGCAPTgui;

/**
 *(c) 2018 BATTELLE ENERGY ALLIANCE, LLC
 *ALL RIGHTS RESERVED 
 *
 * @author kur
 */
public class AggregationDialog extends javax.swing.JDialog {
    Object rowData[][] = {{ "Row1-Column1", "Row1-Column2", "Row1-Column3" }};
    List<String> aggregateComponentNameArray = new ArrayList<>();
    SgComponentGroupList theGroupList;
    ArrayList<SgComponent> aggregateComponents;
    ArrayList<String> componentListUuids = new ArrayList<>();

    private String[] columnNames = {"Component", "Quantity"};
    private Object[][] data = null;
    private boolean showAggregationDialog = true;

    /**
     * Creates new form AggregationDialog
     */
    public AggregationDialog(IGCAPTgui igCAPTgui, boolean modal) {
        super(igCAPTgui, modal);
        
        theGroupList = igCAPTgui.getComponentGroupList();
        aggregateComponents = theGroupList.getAggregateComponents();
        for (SgComponent component : aggregateComponents) {
            aggregateComponentNameArray.add(component.getName());
        }        
        
        initComponents();
        aggregationNodeTypesComboBox.setSelectedIndex(0);
        componentQuantitiesTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
                     
        // Center the dialog within the main window.
        setLocationRelativeTo(igCAPTgui);

    }

    public AggregationDialog(javax.swing.JFrame frame, boolean modal) {
        super(frame, modal);
        initComponents();
    }
    
    public ArrayList<Pair<String, Integer>> getAggregateConfiguration() {
        
        int row=0;
        ArrayList<Pair<String, Integer>> returnval = new ArrayList<>();
        
        // Retrieve the current quantities, preserving the uuid keys.
        for (String entry:componentListUuids) {
            int value = 0;

            String valueStr = (String)componentQuantitiesTable.getValueAt(row, 1);
            value = Integer.parseInt(valueStr);

            returnval.add(new Pair<String, Integer>(entry, value));

            row++;
        }
        return returnval;
    }
    
    public double getDefaultMaxRate() {
        
        double returnval = 1.0;
        String valueStr = connectionRateTextField.getText();
        
        try {
            returnval = Double.parseDouble(valueStr);
        }
        catch(NullPointerException | NumberFormatException ex) {
            connectionRateTextField.setText(Double.toString(returnval));
        }
        
        return returnval;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aggregationNodeTypeLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        aggregationNodeTypesComboBox = new javax.swing.JComboBox<>();
        scrollPanePanel = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        componentQuantitiesTable = new javax.swing.JTable();
        subcomponentsLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        connectionRateTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Aggregation");
        setModal(true);
        setResizable(false);

        aggregationNodeTypeLabel.setText("Aggregation Node Type");

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(65, 23));
        okButton.setMinimumSize(new java.awt.Dimension(65, 23));
        okButton.setPreferredSize(new java.awt.Dimension(65, 23));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        aggregationNodeTypesComboBox.setModel(new DefaultComboBoxModel(aggregateComponentNameArray.toArray()));
        aggregationNodeTypesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                aggregateComboBoxItemSelected(evt);
            }
        });
        aggregationNodeTypesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggregationNodeTypesComboBoxActionPerformed(evt);
            }
        });

        componentQuantitiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Component", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane.setViewportView(componentQuantitiesTable);

        javax.swing.GroupLayout scrollPanePanelLayout = new javax.swing.GroupLayout(scrollPanePanel);
        scrollPanePanel.setLayout(scrollPanePanelLayout);
        scrollPanePanelLayout.setHorizontalGroup(
            scrollPanePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scrollPanePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        scrollPanePanelLayout.setVerticalGroup(
            scrollPanePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scrollPanePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
        );

        subcomponentsLabel.setText("Subcomponents");

        jLabel1.setText("Connection Rate");
        jLabel1.setToolTipText("");

        connectionRateTextField.setText("1.0");
        connectionRateTextField.setToolTipText("Enter the maximum transmission rate used for the created connections.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPanePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subcomponentsLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aggregationNodeTypeLabel)
                            .addComponent(aggregationNodeTypesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(connectionRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(cancelButton)
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aggregationNodeTypeLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aggregationNodeTypesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(subcomponentsLabel)
                .addGap(4, 4, 4)
                .addComponent(scrollPanePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        // Get the component quantities
        
        dispose();

    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        showAggregationDialog = false;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void aggregationNodeTypesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggregationNodeTypesComboBoxActionPerformed

        int selectedIndex = aggregationNodeTypesComboBox.getSelectedIndex();

        SgComponent selectedComponent = aggregateComponents.get(selectedIndex);
        ArrayList<String> uuids = selectedComponent.getCollapseIntoTypeUuids();
        
        int numberOfUuids = uuids.size();
        data = new Object [numberOfUuids][2];        
        
        int row = 0;
        int column = 0;
        componentListUuids.clear();
        for (String uuid : uuids) {
            SgComponent theIncludedComponent = theGroupList.getComponentByUuid(uuid);
            data [row][column] = theIncludedComponent.getName();
            data [row][column+1] = "0";
            
            // We will set the Integers in the getAggregateConfiguration method.
            componentListUuids.add(uuid);

            row++;
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int col) {
                boolean returnval = true;
                
                if (col == 0) {
                    returnval = false;
                }
                
                return returnval;
            }
        };
        componentQuantitiesTable.setModel(tableModel);       
    }//GEN-LAST:event_aggregationNodeTypesComboBoxActionPerformed

    private void aggregateComboBoxItemSelected(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_aggregateComboBoxItemSelected
        // TODO add your handling code here:                
    }//GEN-LAST:event_aggregateComboBoxItemSelected

    public SgComponent getSelectedComponent() {
        return aggregateComponents.get(aggregationNodeTypesComboBox.getSelectedIndex());
    }
    
    boolean isAggregationCancelled(){
        return showAggregationDialog;
    }
    
    public boolean showDialog() {
        setVisible(true);
        return isAggregationCancelled();
 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AggregationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AggregationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AggregationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AggregationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AggregationDialog dialog = new AggregationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aggregationNodeTypeLabel;
    private javax.swing.JComboBox<String> aggregationNodeTypesComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable componentQuantitiesTable;
    private javax.swing.JTextField connectionRateTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel scrollPanePanel;
    private javax.swing.JLabel subcomponentsLabel;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
