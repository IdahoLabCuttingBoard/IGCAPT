/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package igcapt.inl.components;

import edu.uci.ics.jung.graph.Graph;
import igcapt.inl.components.generated.SgUseCaseData;
import igcapt.inl.components.SgUseCase;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;
import javax.swing.table.DefaultTableModel;
import org.openstreetmap.gui.jmapviewer.IGCAPTgui;
import org.openstreetmap.gui.jmapviewer.SgNode;
import org.openstreetmap.gui.jmapviewer.SgNodeInterface;

/**
 *(c) 2018 BATTELLE ENERGY ALLIANCE, LLC
 *ALL RIGHTS RESERVED 
 *
 * @author FRAZJD
 */
public class ApplyToDialog extends javax.swing.JDialog {
    
    private final UseCaseNodeData _useCaseNodeData;
    private final HashMap<UUID, Integer> _useCaseApplyToData = new HashMap<>();

    public HashMap<UUID, Integer> getUseCaseApplyToData() {
        return _useCaseApplyToData;
    }
    
    public enum ReturnValue {
        Unknown,
        Ok,
        Cancel
    }
    private ReturnValue returnValue = ReturnValue.Unknown;
    public ReturnValue getReturnValue() {
        return returnValue;
    }
    
    private final HashMap<String, UUID> _applyToComponentMap = new HashMap<>();
    
    /**
     * Creates new form ApplyToDialog
     */
    public ApplyToDialog(java.awt.Frame parent, boolean modal, UseCaseNodeData useCaseNodeData) {
        super(parent, modal);
        initComponents();

        applyToTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        _useCaseNodeData = useCaseNodeData;
        updateApplyToTable();
        
        // Center the dialog within the main window.
        setLocationRelativeTo(parent);
    }
    
    private void updateApplyToTable() {
        
        HashMap<UUID, Integer> useCaseApplyData = _useCaseNodeData.getUseCaseApplyData();
        
        // Looking through all current nodes, find all types that have this use case.
        Graph originalGraph = IGCAPTgui.getInstance().getOriginalGraph();
        List<SgNodeInterface> nodes = new ArrayList<>(originalGraph.getVertices());
        String useCaseStr = _useCaseNodeData.getText();
        
        for (SgNodeInterface node : nodes) {
            
            if (node instanceof SgNode) {
                SgComponent component = ((SgNode) node).getAssociatedComponent();
                ArrayList<SgUseCase> useCaseData = component.getUseCaseData();
                
                for(SgUseCase useCaseElement : useCaseData) {
                    if (useCaseElement.getElementName().equalsIgnoreCase(useCaseStr)) {
                        _applyToComponentMap.put(component.getName(), component.getTypeUuid());
                    }
                }
            }
        }
        
        Object[][] data = new Object[_applyToComponentMap.size()][2];
        int row=0,column=0;
        for (String key : _applyToComponentMap.keySet()) {
            data [row][column] = key;
            Integer value = null;
            if (useCaseApplyData != null) {
                value = useCaseApplyData.get(_applyToComponentMap.get(key));
            }
            data [row][column+1] = (value==null)?"0":value.toString();
            row++;
        }
        
        String[] columnNames = {"Component", "Percent to Apply"};
        DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int col) {
                boolean returnval = true;
                if (col == 0) {
                    returnval = false;
                }
                
                return returnval;
            }
        };

        applyToTable.setModel(model);       
    }
    
    /**
     * Save the data in a structure that can be used outside the dialog.
     * 
     * component type uuids
     * component type percentages
     */
    private void saveData() {
        
        _useCaseApplyToData.clear();
        
        // Save as key/value pairs with the keys being a uuid.
        for (int i=0; i<applyToTable.getRowCount(); ++i) {
            String elementName = (String)applyToTable.getValueAt(i,0);
            String percent = (String)applyToTable.getValueAt(i, 1);
            
            // Need the component uuid and not the name. Look this up from the name.
            _useCaseApplyToData.put(_applyToComponentMap.get(elementName), Integer.parseInt(percent));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OkButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        applyToTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Apply Use Cases to Devices");
        setMaximumSize(new java.awt.Dimension(400, 500));
        setMinimumSize(new java.awt.Dimension(400, 396));
        setResizable(false);

        OkButton.setText("Ok");
        OkButton.setMaximumSize(new java.awt.Dimension(73, 23));
        OkButton.setMinimumSize(new java.awt.Dimension(73, 23));
        OkButton.setPreferredSize(new java.awt.Dimension(73, 23));
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.setMaximumSize(new java.awt.Dimension(73, 23));
        CancelButton.setMinimumSize(new java.awt.Dimension(73, 23));
        CancelButton.setPreferredSize(new java.awt.Dimension(73, 23));
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        applyToTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Component Type", "Percent to Apply"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        applyToTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(applyToTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        returnValue = ReturnValue.Ok;
        
        saveData();
        
        dispose();
    }//GEN-LAST:event_OkButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        returnValue = ReturnValue.Cancel;
        dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton OkButton;
    private javax.swing.JTable applyToTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
