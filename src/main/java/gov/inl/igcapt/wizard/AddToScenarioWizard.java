/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gov.inl.igcapt.wizard;

//import com.fasterxml.jackson.core.JsonGenerator;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;
import gov.inl.igcapt.properties.IGCAPTproperties;
/**
 *
 * @author CHE
 */
public class AddToScenarioWizard extends javax.swing.JDialog {
    private List<GucsInformation>m_gucsList;
    private List<CnrmInformation>m_cnrmList;
    private final ScenarioInformation m_newScenarioInfo;
    /**
     * Creates new form ScenarioWizard
     */
    public AddToScenarioWizard(java.awt.Frame parent, boolean modal, ScenarioInformation newScenario) {
        super(parent, modal);
        m_newScenarioInfo = newScenario;
        initComponents();
        initComboBoxes();
        if (!m_gucsList.isEmpty() && !m_cnrmList.isEmpty()) {
            jButton2.setEnabled(true);
        }
        else {
            jButton2.setEnabled(false);
        }
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update Scenario with GUCS/CNRM");

        jLabel1.setText("Select GUCS");
        jLabel1.setToolTipText("");

        jLabel2.setText("Select CNRM");

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, 303, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initComboBoxes() {
        m_gucsList = getGucsList();
        m_cnrmList = getCnrmList();
        String[] stringArray = new String[m_gucsList.size()];
        int count=0;
        for (GucsInformation gucs : m_gucsList) {
            stringArray[count++] = gucs.getName();
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(stringArray));        
        stringArray = new String[m_cnrmList.size()];
        count=0;
        for (CnrmInformation cnrm : m_cnrmList) {
            stringArray[count++] = cnrm.getName();
        }
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(stringArray));
        
    }
    
    private List<GucsInformation> getGucsList() {
        String output;
        try {
            URL url = new URL("https://gdtafserviceapi.azure-api.net/core/gucs?subscription-key=f25aca8b0567432592271335d31851d7");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            if (conn.getResponseCode() != 200) {
                throw new RuntimeException("Failed : HTTP Error code : "+ conn.getResponseCode());
            }
            
            InputStreamReader in = new InputStreamReader(conn.getInputStream());
            BufferedReader br = new BufferedReader(in);
            ObjectMapper objMapper = new ObjectMapper();
            TypeFactory typeFactory = objMapper.getTypeFactory();
            CollectionType collectionType = typeFactory.constructCollectionType(List.class, GucsInformation.class);
            while ((output = br.readLine()) != null) {
                m_gucsList = objMapper.readValue(output, collectionType);
            }
            conn.disconnect();
            // at this point need to parse the results and add to the combo
        }
        catch (Exception e2) {
            System.out.println("Exception!"+e2.getMessage());
        }
        return m_gucsList;
    }
    
    private List<CnrmInformation> getCnrmList() {
        String output;
        try {
            URL url = new URL("https://gdtafserviceapi.azure-api.net/core/cnrm?subscription-key=f25aca8b0567432592271335d31851d7");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            if (conn.getResponseCode() != 200) {
                throw new RuntimeException("Failed : HTTP Error code : "+ conn.getResponseCode());
            }
            
            InputStreamReader in = new InputStreamReader(conn.getInputStream());
            BufferedReader br = new BufferedReader(in);
            ObjectMapper objMapper = new ObjectMapper();
            TypeFactory typeFactory = objMapper.getTypeFactory();
            CollectionType collectionType = typeFactory.constructCollectionType(List.class, CnrmInformation.class);
            while ((output = br.readLine()) != null) {
                m_cnrmList = objMapper.readValue(output, collectionType);
            }
            conn.disconnect();
            // at this point need to parse the results and add to the combo
        }
        catch (Exception e2) {
            System.out.println("Exception!"+e2.getMessage());
        }
        return m_cnrmList;
    }
    
    private void updateScenarioGucsList() {
        JSONArray jsonArray = new JSONArray();
        // This will need to be updated to pick multiples but for now just one
        int index = jComboBox1.getSelectedIndex();
        GucsInformation selectedGucs = m_gucsList.get(index);
        jsonArray.put(selectedGucs.getId());
        String scenarioId = m_newScenarioInfo.getId();

        try {
            String urlString = "https://gdtafserviceapi.azure-api.net/core/scenarios/" + scenarioId +
                               "/gucs?subscription-key=f25aca8b0567432592271335d31851d7"; 
            URL url = new URL(urlString);
            
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("PUT");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            
            OutputStream os = conn.getOutputStream();
            byte[] input = jsonArray.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
            if (conn.getResponseCode() != 200) {
                System.out.println("Message=="+conn.getResponseMessage());
                System.out.println("Bad response code=="+conn.getResponseCode());
                throw new RuntimeException("Failed : HTTP Error code : "+ conn.getResponseCode());
            }       
                        
            InputStreamReader isr = new InputStreamReader(conn.getInputStream(), "utf-8");
            BufferedReader br = new BufferedReader(isr);
            ObjectMapper objMapper = new ObjectMapper();
            
            String response = br.readLine();
            if (conn.getResponseCode() != 200) { 
                ProblemDetails problemDetails = objMapper.readValue(response, ProblemDetails.class);
                System.out.println(problemDetails.toString());
            }
                
            conn.disconnect();
        }
        catch (Exception e2) {
            System.out.println(e2.getMessage());
        }
    }
    
    private void updateScenarioCnrmList() {
        JSONArray jsonArray = new JSONArray();
        // This will need to be updated to pick multiples but for now just one
        int index = jComboBox2.getSelectedIndex();
        CnrmInformation selectedCnrm = m_cnrmList.get(index);
        jsonArray.put(selectedCnrm.getId());
        String scenarioId = m_newScenarioInfo.getId();

        try {
            String urlString = "https://gdtafserviceapi.azure-api.net/core/scenarios/" + scenarioId +
                               "/cnrm?subscription-key=f25aca8b0567432592271335d31851d7"; 
            URL url = new URL(urlString);
            
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("PUT");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty("Accept", "application/json");
            
            OutputStream os = conn.getOutputStream();
            byte[] input = jsonArray.toString().getBytes("utf-8");
            os.write(input, 0, input.length);
            if (conn.getResponseCode() != 200) {
                System.out.println("Message=="+conn.getResponseMessage());
                System.out.println("Bad response code=="+conn.getResponseCode());
                throw new RuntimeException("Failed : HTTP Error code : "+ conn.getResponseCode());
            }       
                        
            InputStreamReader isr = new InputStreamReader(conn.getInputStream(), "utf-8");
            BufferedReader br = new BufferedReader(isr);
            ObjectMapper objMapper = new ObjectMapper();
            
            String response = br.readLine();
            if (conn.getResponseCode() != 200) { 
                ProblemDetails problemDetails = objMapper.readValue(response, ProblemDetails.class);
                System.out.println(problemDetails.toString());
            }
                
            conn.disconnect();
        }
        catch (Exception e2) {
            System.out.println(e2.getMessage());
        }
    }

    // For now write the scenario file to the "LastPath" property locations
    // Name the file scenarioInformation.getName()
    private void writeScenarioFile(ScenarioDetails scenarioDetails) {
        String lastPath = IGCAPTproperties.getInstance().getPropertyKeyValue("LastPath");
        // strip off the filename
        int index = lastPath.lastIndexOf(File.separator);
        lastPath = lastPath.substring(0, index);
        String scenarioFile = lastPath + File.separator + 
            scenarioDetails.getScenarioInformation().getName() + ".xml";
        try {
            
            PrintWriter writer = new PrintWriter(scenarioFile, "UTF-8");
            writer.println(scenarioDetails.getContent());
            writer.close();
        }
        catch (Exception e) {
            System.out.println("Exception:"+e.getMessage());
        }
    }
    
    private void getTheScenarioFile() {
        String output;
        ScenarioDetails scenarioDetails = null;
        try {
            URL url = new URL("https://gdtafserviceapi.azure-api.net/core/scenarios/" +
                              m_newScenarioInfo.getId() + "?subscription-key=f25aca8b0567432592271335d31851d7");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            if (conn.getResponseCode() != 200) {
                throw new RuntimeException("Failed : HTTP Error code : "+ conn.getResponseCode());
            }
            
            InputStreamReader in = new InputStreamReader(conn.getInputStream());
            BufferedReader br = new BufferedReader(in);
            ObjectMapper objMapper = new ObjectMapper();
            while ((output = br.readLine()) != null) {
                scenarioDetails = objMapper.readValue(output, ScenarioDetails.class);
            }
            if (scenarioDetails != null) {
                writeScenarioFile(scenarioDetails);
            }
            conn.disconnect();
            // at this point need to parse the results and add to the combo
        }
        catch (Exception e2) {
            System.out.println("Exception!"+e2.getMessage());
            //return e2.getMessage();
        }
    }

    // Next button in the wizard
    // PUT to update the list of GUCS for the scenario  -- need scneario id and gucs id(s)
    // PUT to update the list of CNRM for the scenario -- need scenario id and cnrm id(s)
    // Get to get the scenario file and write it to file system.
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        updateScenarioGucsList();
        updateScenarioCnrmList();
        //System.out.println("Skip the puts and do the get");
        getTheScenarioFile();
        //cleanupScenarios(); -- this is test code
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddToScenarioWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddToScenarioWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddToScenarioWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddToScenarioWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Scenario hard coded for testing
                ScenarioInformation scenario = new ScenarioInformation();
                scenario.setId("_1ee34d83-8fe3-4ad2-9757-d718b4218040");
                scenario.setName("newTest1");
                scenario.setSourceId("_1ee34d83-8fe3-4ad2-9757-d718b4218040");
                AddToScenarioWizard dialog = new AddToScenarioWizard(new javax.swing.JFrame(), true, scenario);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
